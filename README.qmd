---
title: "Readme"
format: gfm
execute: 
  echo: true
  message: false
  warning: false
---

## Purpose

Collect soil quality data and aggregate up to NUTS2 level to join to Rosés-Wolf database on regional GDP. We do this both for NUTS2 and NUTS3 (and for Sweden and Spain separately).

## Download data

```{r}
#| echo: false
library(tidyverse)
library(gt)
tibble(
  type = c("NUTS2 Europe", "NUTS3 Europe", "NUTS3 Spain", "NUTS3 Sweden"),
  links = c(
    "data/soil_suitability.xlsx",
    "data/soil_suitability_nuts_3.csv",
    "data/soil_suitability_nuts_3_ES.csv",
    "data/soil_suitability_nuts_3_SE.csv"
  ),
  format = c("xls", "csv", "csv", "csv"),
  logos = c("https://upload.wikimedia.org/wikipedia/commons/thumb/4/44/Europe_orthographic_Caucasus_Urals_boundary_%28with_borders%29.svg/1200px-Europe_orthographic_Caucasus_Urals_boundary_%28with_borders%29.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/4/44/Europe_orthographic_Caucasus_Urals_boundary_%28with_borders%29.svg/1200px-Europe_orthographic_Caucasus_Urals_boundary_%28with_borders%29.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/8/89/Bandera_de_Espa%C3%B1a.svg/1920px-Bandera_de_Espa%C3%B1a.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/4/4c/Flag_of_Sweden.svg/1920px-Flag_of_Sweden.svg.png")
) %>%
  mutate(
    link = glue::glue("<a href = {links}>
                      <img src='{logos}' width='80' height='80'>
                                   </a>"),
    link_text = glue::glue("<a href = {links}>
                      {type}
                                   </a>"),
    link = purrr::map(link, gt::html),
    link_text = purrr::map(link_text, gt::html)
  ) %>%
  select(link, link_text, format) %>%
  gt() %>%
  cols_align(columns = c(link, link_text), align = "left") %>% 
  tab_options(column_labels.hidden = TRUE) %>% 
  tab_header(title = md("**Download data**")) %>% 
  as_raw_html(inline_css = TRUE)
```


## What does the data look like?

It looks like this:

```{r}
#| echo: false

theme_set(theme_light())


df_out <- read_rds(here::here("data", "soil_suitability.rds"))

df_out %>% 
  slice_head(n = 10) %>% 
  gt() %>% 
  tab_header(title = "Extract of soil quality data") %>% 
  as_raw_html(inline_css = TRUE)
```

### Data

Data on wheat suitability from FAO-GAEZ 4, available at the [following link](https://gaez-data-portal-hqfao.hub.arcgis.com/pages/data-viewer).

The data viewer presents the data like so:

```{r}
knitr::include_graphics("images/fao_interface.PNG")
```

The specific extract information is:

```{r}
#| echo: false
tribble(
  ~Field, ~Value,
  "Theme", "Suitability and Attainable Yield",
  "Sub-theme", "Suitability Class",
  "Variable name", "Crop suitability index in classes",
  "Time period", "1981-2010",
  "Climate data source", "CRUTS32",
  "Crop", "Wheat",
  "Water supply", "Rainfed",
  "Input level", "Low"
) %>% 
  gt::gt() %>% 
  tab_header(title = "FAO-GAEZ 4 metadata") %>% 
  as_raw_html(inline_css = TRUE)
```

It is in a raster format - where the earth is broken into tiles.

This is what it looks like on a map:

```{r}
library(stars)

tif <- read_stars(here::here("data", "siLr_whe_class.tif"))

ggplot() +
  geom_stars(data = tif)
```

We want to aggregate this to the nuts2 levels used in the Rosés-Wolf database on regional GDP.

### NUTS2 shapefile

The NUTS2 shapefiles are from [Eurostat](https://ec.europa.eu/eurostat/web/gisco/geodata/reference-data/administrative-units-statistical-units/nuts)

We're going to work in WGS84 for convenience (EPSG: 4326).

We now need to aggregate up the NUTS2 regions which are joined together in the Rosés-Wolf database on regional GDP.

They are:

```{r}
#| echo: false

tribble(
  ~NUTS2_regions, ~Aggregation,
  "AT12+AT13", "AT123",
  "DE71+DE72", "DE712",
  "DE91+DE92", "DE912"
) %>%
  gt() %>%
  tab_header(title = "Aggregations of NUTS2 regions") %>% 
  as_raw_html(inline_css = TRUE)
```

The following chunk manipulates the shapefile to make it easier to work with in a WGS84 projection.

```{r}
library(sf)

# map <- read_sf(here::here("maps", "regions_nuts2.shp")) %>% janitor::clean_names()

# map_tbl <- map %>% as_tibble()

# map_tbl %>%
#   ggplot(aes(geometry = geometry)) +
#   geom_sf() +
#   coord_sf()

## Making the map files smaller
# library(rmapshaper)
# map_simple <- ms_simplify(map, keep = 0.1,
#                                 keep_shapes = FALSE)
# 
# map_tbl_simple <- map_simple %>% as_tibble()
# 
# map_tbl_simple %>% write_rds(here::here("maps", "NUTS2_simple.rds"))

map_simple <- read_rds(here::here("maps", "NUTS2_simple.rds")) %>% 
  st_as_sf()

map_simple <- map_simple %>% 
  st_transform(crs = 4326)
```

We want to crop to only Europe: this is what the raster file looks like now.

```{r}
# st_crop removes the raster region outside of europe
tif_bbox <- st_crop(tif, map_simple %>% st_bbox())

ggplot() +
  geom_stars(data = tif_bbox)
```

Now we want to calculate the averages within each polygon, along with the min and max values within each polygon.

```{r}
# devtools::install_github("michaeldorman/geobgu")
library(geobgu)

map_simple_avgs <-
  map_simple %>% mutate(
    suitability_class_mean = raster_extract(tif_bbox, map_simple, fun = mean, na.rm = TRUE),
    suitability_class_max = raster_extract(tif_bbox, map_simple, fun = max, na.rm = TRUE),
    suitability_class_min = raster_extract(tif_bbox, map_simple, fun = min, na.rm = TRUE)
  )
```

This is what the averaging procedure produces:

```{r}
#| echo: false

map_simple_avgs %>% ggplot() +
  geom_sf(aes(fill = suitability_class_mean)) +
  scale_fill_viridis_c() +
  coord_sf() +
  labs(fill = "Soil suitability\nfor rainfed wheat\n(mean of class,\nlower is better)")
```

The distribution of minimum and maximum values is quite erratic. The plot below arranges the NUTS2 regions from lowest mean of suitability class to largest. The ribbon shows the 

```{r}
#| echo: false

map_simple_avgs %>%
  st_set_geometry(NULL) %>%
  mutate(nuts_code = fct_reorder(nuts_code, suitability_class_mean)) %>%
  ggplot(aes(
    x = nuts_code, y = suitability_class_mean,
    ymin = suitability_class_min,
    ymax = suitability_class_max,
    group = 1
  )) +
  geom_line() +
  geom_ribbon(alpha = .3) +
  labs(
    x = "NUTS code",
    y = "Soil suitability index"
  )
```

Here is an example of 10 random regions.

```{r}
#| echo: false
map_simple_avgs %>%
  slice_sample(n = 10) %>% 
  st_set_geometry(NULL) %>%
  knitr::kable()
```

### Join to Rosés-Wolf database on regional GDP

```{r}
# read in data file
df <- haven::read_dta(here::here("data", "RosesWolf_Regional_Fahad.dta"))

# keep unique nuts codes
df <- df %>%
  distinct(id, nuts, region, country)

# change label of joined regions
map_simple_avgs <- map_simple_avgs %>%
  st_set_geometry(NULL) %>%
  mutate(nuts = case_when(
    nuts_code == "AT123" ~ "AT12+AT13",
    nuts_code == "DE712" ~ "DE71+DE72",
    nuts_code == "DE912" ~ "DE91+DE92",
    TRUE ~ nuts_code
  ))

# join together
df_out <- df %>%
  left_join(map_simple_avgs) %>%
  select(-nuts_code)

# df_out %>% 
#   write_rds(here::here("data", "soil_suitability.rds"))

# df_out %>% 
#   write.csv(here::here("data", "soil_suitability.csv"))
```

## NUTS3 shapefile

The NUTS3 shapefiles are from [Eurostat](https://ec.europa.eu/eurostat/web/gisco/geodata/reference-data/administrative-units-statistical-units/nuts)

We're going to work in WGS84 for convenience (EPSG: 4326).

We now need to aggregate up the NUTS3 regions which are joined together in the Rosés-Wolf database on regional GDP for Sweden and Spain.

They are:

```{r}
#| echo: false

tribble(
  ~NUTS2_regions, ~Aggregation,
  "AT12+AT13", "AT123",
  "DE71+DE72", "DE712",
  "DE91+DE92", "DE912"
) %>%
  gt() %>%
  tab_header(title = "Aggregations of NUTS2 regions") %>% 
  as_raw_html(inline_css = TRUE)
```

The following chunk manipulates the shapefile to make it easier to work with in a WGS84 projection.

```{r}
library(sf)

map <- read_sf(here::here("maps", "NUTS_RG_01M_2021_4326.shp")) %>% janitor::clean_names()

map_tbl <- map %>% as_tibble()

map_tbl %>%
  ggplot(aes(geometry = geometry)) +
  geom_sf() +
  coord_sf()

# Making the map files smaller
library(rmapshaper)
map_simple <- ms_simplify(map, keep = 0.1,
                                keep_shapes = FALSE)

map_tbl_simple <- map_simple %>% as_tibble()

map_tbl_simple %>% write_rds(here::here("maps", "NUTS3_simple.rds"))

map_simple <- read_rds(here::here("maps", "NUTS3_simple.rds")) %>% 
  st_as_sf() %>% 
  filter(levl_code == 3)

map_simple <- map_simple %>% 
  st_transform(crs = 4326)
```

We want to crop to only Europe: this is what the raster file looks like now.

```{r}
# st_crop removes the raster region outside of europe
tif_bbox <- st_crop(tif, map_simple %>% st_bbox())

ggplot() +
  geom_stars(data = tif_bbox)
```

Now we want to calculate the averages within each polygon, along with the min and max values within each polygon.

```{r}
# devtools::install_github("michaeldorman/geobgu")
library(geobgu)

map_simple_avgs <-
  map_simple %>% mutate(
    suitability_class_mean = raster_extract(tif_bbox, map_simple, fun = mean, na.rm = TRUE),
    suitability_class_max = raster_extract(tif_bbox, map_simple, fun = max, na.rm = TRUE),
    suitability_class_min = raster_extract(tif_bbox, map_simple, fun = min, na.rm = TRUE)
  )

map_simple_avgs <- map_simple %>% 
  bind_cols(map_simple_avgs$suitability_class_mean %>% as_tibble() %>% rename(suitability_class_mean = V1)) %>% 
  bind_cols(map_simple_avgs$suitability_class_max %>% as_tibble() %>% rename(suitability_class_max = V1)) %>%
  bind_cols(map_simple_avgs$suitability_class_min %>% as_tibble() %>% rename(suitability_class_min = V1))
```

This is what the averaging procedure produces:

```{r}
#| echo: false

map_simple_avgs %>% ggplot() +
  geom_sf(aes(fill = suitability_class_mean)) +
  scale_fill_viridis_c() +
  coord_sf() +
  labs(fill = "Soil suitability\nfor rainfed wheat\n(mean of class,\nlower is better)")
```

The distribution of minimum and maximum values is quite erratic. The plot below arranges the NUTS2 regions from lowest mean of suitability class to largest. The ribbon shows the 

```{r}
#| echo: false

map_simple_avgs %>%
  st_set_geometry(NULL) %>%
  mutate(nuts_id = fct_reorder(nuts_id, suitability_class_mean),
         rank = rank(nuts_id)) %>%
  ggplot(aes(
    x = rank, y = suitability_class_mean,
    ymin = suitability_class_min,
    ymax = suitability_class_max,
    group = 1
  )) +
  geom_line() +
  geom_ribbon(alpha = .3) +
  labs(
    x = "NUTS code",
    y = "Soil suitability index"
  )
```

Here is an example of 10 random regions.

```{r}
#| echo: false
map_simple_avgs %>%
  slice_sample(n = 10) %>% 
  st_set_geometry(NULL) %>%
  knitr::kable()
```

```{r}
#| eval: false

map_simple_avgs %>%
  as_tibble() %>% 
  select(-geometry) %>% 
  janitor::clean_names() %>% 
  # filter(cntr_code %in% c("SE", "ES")) %>% 
  write_excel_csv2(here::here("data", "soil_suitability_nuts_3.csv"))

map_simple_avgs %>%
  as_tibble() %>% 
  select(-geometry) %>% 
  janitor::clean_names() %>% 
  filter(cntr_code %in% c("ES")) %>%
  write_excel_csv2(here::here("data", "soil_suitability_nuts_3_ES.csv"))

```


## Swedish map

Apparently we want the older Swedish regions: of which there are 24. See the Issue 1 on Github.

```{r}
library(histmaps)

se_map <- get_boundaries(1980, "county")

se_map <- se_map %>% 
  st_transform(crs = 4326)

se_map %>% 
  ggplot(aes(fill = name)) +
  geom_sf(alpha = .5)

```

We want to crop to only Sweden: this is what the raster file looks like now.

```{r}
# st_crop removes the raster region outside of europe
tif_bbox <- st_crop(tif, se_map %>% st_bbox())

ggplot() +
  geom_stars(data = tif_bbox)
```

Now we want to calculate the averages within each polygon, along with the min and max values within each polygon.

```{r}
# devtools::install_github("michaeldorman/geobgu")
library(geobgu)

map_simple_avgs_sweden <-
  se_map %>% mutate(
    suitability_class_mean = raster_extract(tif_bbox, se_map, fun = mean, na.rm = TRUE),
    suitability_class_max = raster_extract(tif_bbox, se_map, fun = max, na.rm = TRUE),
    suitability_class_min = raster_extract(tif_bbox, se_map, fun = min, na.rm = TRUE)
  )

map_simple_avgs_sweden <- se_map %>% 
  bind_cols(map_simple_avgs_sweden$suitability_class_mean %>% as_tibble() %>% rename(suitability_class_mean = V1)) %>% 
  bind_cols(map_simple_avgs_sweden$suitability_class_max %>% as_tibble() %>% rename(suitability_class_max = V1)) %>%
  bind_cols(map_simple_avgs_sweden$suitability_class_min %>% as_tibble() %>% rename(suitability_class_min = V1))
```

This is what the averaging procedure produces:

```{r}
#| echo: false

map_simple_avgs_sweden %>% ggplot() +
  geom_sf(aes(fill = suitability_class_mean)) +
  scale_fill_viridis_c() +
  coord_sf() +
  labs(fill = "Soil suitability\nfor rainfed wheat\n(mean of class,\nlower is better)")
```

The distribution of minimum and maximum values is quite erratic. The plot below arranges the NUTS2 regions from lowest mean of suitability class to largest. The ribbon shows the 

```{r}
#| echo: false

map_simple_avgs_sweden %>%
  st_set_geometry(NULL) %>%
  mutate(name = fct_reorder(name, suitability_class_mean)) %>%
  ggplot(aes(
    x = name, y = suitability_class_mean,
    ymin = suitability_class_min,
    ymax = suitability_class_max,
    group = 1
  )) +
  geom_line() +
  geom_ribbon(alpha = .3) +
  labs(
    x = "NUTS code",
    y = "Soil suitability index"
  )
```

Here is an example of 10 random regions.

```{r}
#| echo: false
map_simple_avgs_sweden %>%
  slice_sample(n = 10) %>% 
  st_set_geometry(NULL) %>%
  knitr::kable()
```

Export Data

```{r}
#| echo: false
#| eval: false
df_sweden_out <- map_simple_avgs_sweden %>% 
  select(name, contains("suit")) %>% 
  as_tibble() %>% 
  select(-geometry)

df_sweden_out %>% 
  write_csv2(here::here("data", "soil_suitability_nuts_3_SE.csv"))

se_map %>% 
  select(ref_code, name, type_id) %>% 
  st_write(here::here("maps", "sweden_24_couties.shp"))
```

